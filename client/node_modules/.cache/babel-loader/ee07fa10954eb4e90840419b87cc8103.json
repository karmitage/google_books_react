{"ast":null,"code":"var _jsxFileName = \"/Users/katherinearmitage/UW Bootcamp/google-books/client/src/pages/SearchBooks.js\";\nimport React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport { Container, Row, Col } from \"../components/Grid\";\nimport SearchForm from \"../components/SearchForm\";\nimport SearchResult from \"../components/SearchResult\";\n\nclass SearchBooks extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: \"\",\n      books: [],\n      error: \"\",\n      message: \"\"\n    };\n\n    this.handleInputChange = event => {\n      this.setState({\n        search: event.target.value\n      });\n    };\n\n    this.handleFormSubmit = event => {\n      event.preventDefault(); // once it clicks it connects to the google book api with the search value\n\n      API.getGoogleSearchBooks(this.state.search).then(res => {\n        if (res.data.items === \"error\") {\n          throw new Error(res.data.items);\n        } else {\n          // store response in a array\n          let results = res.data.items; //map through the array \n\n          results = results.map(result => {\n            //store each book information in a new object \n            result = {\n              key: result.id,\n              id: result.id,\n              title: result.volumeInfo.title,\n              author: result.volumeInfo.authors,\n              description: result.volumeInfo.description,\n              image: result.volumeInfo.imageLinks.thumbnail,\n              link: result.volumeInfo.infoLink\n            };\n            return result;\n          }); // reset the sate of the empty books array \n\n          this.setState({\n            books: results,\n            error: \"\"\n          });\n        }\n      }).catch(err => this.setState({\n        error: err.items\n      }));\n    };\n\n    this.handleSavedButton = event => {\n      // console.log(event)\n      event.preventDefault();\n      console.log(\"books state\" + this.state.books);\n      let savedBooks = this.state.books.filter(book => book.id === event.target.id);\n      savedBooks = savedBooks[0];\n      console.log(\"saved books is: \" + savedBooks[0]);\n      API.saveBook(savedBooks).then(this.setState({\n        message: alert(\"Your book is saved\")\n      })).catch(err => console.log(err));\n    };\n  }\n\n  render() {\n    return React.createElement(Container, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Find and Save Books Using the Google Books API\")), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Col, {\n      size: \"12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(SearchForm, {\n      handleFormSubmit: this.handleFormSubmit,\n      handleInputChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(SearchResult, {\n      books: this.state.books,\n      handleSavedButton: this.handleSavedButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default SearchBooks;","map":{"version":3,"sources":["/Users/katherinearmitage/UW Bootcamp/google-books/client/src/pages/SearchBooks.js"],"names":["React","Component","API","Jumbotron","Container","Row","Col","SearchForm","SearchResult","SearchBooks","state","search","books","error","message","handleInputChange","event","setState","target","value","handleFormSubmit","preventDefault","getGoogleSearchBooks","then","res","data","items","Error","results","map","result","key","id","title","volumeInfo","author","authors","description","image","imageLinks","thumbnail","link","infoLink","catch","err","handleSavedButton","console","log","savedBooks","filter","book","saveBook","alert","render"],"mappings":"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","sourcesContent":["\nimport React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport { Container, Row, Col } from \"../components/Grid\";\nimport SearchForm from \"../components/SearchForm\";\nimport SearchResult from \"../components/SearchResult\"\n\n\nclass SearchBooks extends Component {\n    //create state\n    state = {\n        search: \"\",\n        books: [],\n        error: \"\",\n        message: \"\"\n    };\n\n    //function to take value of what enter in the search bar\n    handleInputChange = event => {\n        this.setState({ search: event.target.value })\n    }\n\n    //function to control the submit button of the search form \n    handleFormSubmit = event => {\n        event.preventDefault();\n        // once it clicks it connects to the google book api with the search value\n        API.getGoogleSearchBooks(this.state.search)\n            .then(res => {\n                if (res.data.items === \"error\") {\n                    throw new Error(res.data.items);\n                }\n                else {\n                    // store response in a array\n                    let results = res.data.items\n                    //map through the array \n                    results = results.map(result => {\n                        //store each book information in a new object \n                        result = {\n                            key: result.id,\n                            id: result.id,\n                            title: result.volumeInfo.title,\n                            author: result.volumeInfo.authors,\n                            description: result.volumeInfo.description,\n                            image: result.volumeInfo.imageLinks.thumbnail,\n                            link: result.volumeInfo.infoLink\n                        }\n                        return result;\n                    })\n                    // reset the sate of the empty books array \n                    this.setState({ books: results, error: \"\" })\n                }\n            })\n            .catch(err => this.setState({ error: err.items }));\n    }\n\n    handleSavedButton = event => {\n        // console.log(event)\n        event.preventDefault();\n        console.log(\"books state\" + this.state.books)\n        let savedBooks = this.state.books.filter(book => book.id === event.target.id)\n        savedBooks = savedBooks[0];\n        console.log(\"saved books is: \" + savedBooks[0]);\n        API.saveBook(savedBooks)\n            .then(this.setState({ message: alert(\"Your book is saved\") }))\n            .catch(err => console.log(err))\n    }\n    render() {\n        return (\n            <Container fluid>\n                <Jumbotron>\n                    <h1>Find and Save Books Using the Google Books API</h1>\n                </Jumbotron>\n                <Container>\n                    <Row>\n                        <Col size=\"12\">\n                            <SearchForm\n                                handleFormSubmit={this.handleFormSubmit}\n                                handleInputChange={this.handleInputChange}\n                            />\n                        </Col>\n                    </Row>\n                </Container>\n                <br></br>\n                <Container>\n                    <SearchResult books={this.state.books} handleSavedButton={this.handleSavedButton} />\n                </Container>\n            </Container>\n        )\n    }\n\n\n}\n\nexport default SearchBooks"]},"metadata":{},"sourceType":"module"}